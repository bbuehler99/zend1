<?php
namespace CookingAssist\Model;

use CookingAssist\Model\Recipe;
use CookingAssist\Model\Type;
use CookingAssist\Model\Ingredient;
use CookingAssist\Model\Workflow;

class AddRecipeTable
{
    private $recipesTableGateway;
    private $workflowsTableGateway;
    private $typesTableGateway;
    private $ingredientsTableGateway;
    private $stepsTableGateway;

    function __construct($recipesTableGateway,$workflowsTableGateway,$typesTableGateway,$ingredientsTableGateway,$stepsTableGatway)
    {
        $this->recipesTableGateway = $recipesTableGateway;
        $this->workflowsTableGateway = $workflowsTableGateway;
        $this->typesTableGateway = $typesTableGateway;
        $this->ingredientsTableGateway = $ingredientsTableGateway;
        $this->stepsTableGateway = $stepsTableGatway;
    }
    
    public function saveRecipe($recipe){
        echo "saving recipe...";
        
        
        // Create array with values
        /* insert into database
         * 
         */
        
        

         $id = (int) $recipe->id;
         echo "<br>id before: ".$id;
         if ($id == 0) {
             // insert Workflow and obtain id
             $workflowData = array(
                 'Id' => $id,
                 'Title' => $recipe->title,
                 'Tipp' => $recipe->tipp,
                 'LayoutId' => $recipe->layoutId,
             );
             $this->workflowsTableGateway->insert($workflowData);
             $id = $this->workflowsTableGateway->getLastInsertValue();
             
             echo "inserted WorkflowId: ".$id;
             
             // insert recipe
             $recipeData = array(
                 'Id' => $id,
                 'AuthorId' => $recipe->authorId,
                 'NoOfPeople' => $recipe->noOfPeople,
                 'Kcal'  => $recipe->kcal,
                 'PublicFlag'    => $recipe->publicFlag,
                 'PreparationTime' => $recipe->preparationTime,
                 'CookingTime' => $recipe->cookingTime,
                 'RestingTime'   => $recipe-> restingTime,
                 // creationDate will be generated by Database
                 'Level' =>  $recipe->level,
             );
             $this->recipesTableGateway->insert($recipeData);
             
             // insert steps
             $steps = $recipe->steps;
             $noOfSteps = count($steps);
             echo "length steps: ".$noOfSteps;
             echo "Printing steps<br><br>";
             for($i=0;$i<$noOfSteps;$i++){
                 $step = $steps[$i];
                 $stepData = array(
                     'WorkflowId' => $id,
                     'StepId' => $i,
                     'IsMultiStep' => 0,// implement Multistep later. $step->isMultiStep,
                     'RecipeId' => $id,
                     'Text' => $step->text,
                     'QuantityId' => $step->quantityId,
                     'PictureId' => $step->pictureId,
                 );
                 $this->stepsTableGateway->insert($stepData);
             
             }
             

         } 
         else{
            $message = "something wrong with recipe.id. is not 0";
            echo "<script type='text/javascript'>alert('$message');</script>";
         }
//          else {
//              if ($this->getAlbum($id)) {
//                  $this->tableGateway->update($data, array('id' => $id));
//              } else {
//                  throw new \Exception('Album id does not exist');
//              }
//          }
    }
}

?>