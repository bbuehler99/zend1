<?php
namespace CookingAssist\Model;

use CookingAssist\Model\Recipe;
use CookingAssist\Model\Type;
use CookingAssist\Model\Ingredient;
use CookingAssist\Model\Workflow;

class AddRecipeTable
{
    private $recipesTableGateway;
    private $workflowsTableGateway;
    private $typesTableGateway;
    private $singleStepIngredientsTableGateway;
    private $stepsTableGateway;
    private $quantitiesTableGateway;

    function __construct($recipesTableGateway,$workflowsTableGateway,$typesTableGateway,$singleStepsIngredientsTableGateway,$stepsTableGatway,$quantitiesTableGateway)
    {
        $this->recipesTableGateway = $recipesTableGateway;
        $this->workflowsTableGateway = $workflowsTableGateway;
        $this->typesTableGateway = $typesTableGateway;
        $this->singleStepIngredientsTableGateway = $singleStepsIngredientsTableGateway;
        $this->stepsTableGateway = $stepsTableGatway;
        $this->quantitiesTableGateway = $quantitiesTableGateway;
    }

    /*
     * Saves a single recipe
     * Inserts values from recipe into db tables
     * - Workflows
     * - Recipes
     * - Steps
     * - SingleStepIngredients
     * - Quantities
     */
    public function saveRecipe($recipe){
        echo "saving recipe...";
        echo "recipe: ";
        print_r(get_object_vars($recipe));
        echo "<br>";
        
         $id = (int) $recipe->id;
//          echo "<br>id before: ".$id;
         if ($id == 0) {
//              echo "id is null<br>";
             // insert Workflow
             $workflowData = array(
                 'Id' => $id,
                 'Title' => $recipe->title,
                 'Tipp' => $recipe->tipp,
                 'LayoutId' => $recipe->layoutId,
             );
             $this->workflowsTableGateway->insert($workflowData);
             // Obtain id of inserted Workflow
             $id = $this->workflowsTableGateway->getLastInsertValue();
             
//              echo "inserted WorkflowId: ".$id;
             
             // insert recipe
             $recipeData = array(
                 'Id' => $id,
                 'AuthorId' => $recipe->authorId,
                 'NoOfPeople' => $recipe->noOfPeople,
                 'Kcal'  => $recipe->kcal,
                 'PublicFlag'    => $recipe->publicFlag,
                 'PreparationTime' => $recipe->preparationTime,
                 'CookingTime' => $recipe->cookingTime,
                 'RestingTime'   => $recipe->restingTime,
                 // creationDate will be generated by Database
                 'Level' =>  $recipe->level,
             );
             $this->recipesTableGateway->insert($recipeData);
             
             // insert steps
             $steps = $recipe->steps;
             $noOfSteps = count($steps);
//              echo "length steps: ".$noOfSteps;
//              echo "Printing steps<br><br>";
              
             for($i=0;$i<$noOfSteps;$i++){
                 $step = $steps[$i];
                 
                 // Get quantity unit and value. check if already in database
                $quantityValue = $step->quantityValue;
                $quantityUnit = $step->quantityUnit;
                $quantitiesData = array(
                    'Value' => $quantityValue,
                    'UnitId' => $quantityUnit,
                );
                
                $quantityId = $this->getQuantityId($quantitiesData);
                // if quantity does not exist insert and retrieve id
                if($quantityId < 0){
                    $this->quantitiesTableGateway->insert($quantitiesData);
                    $quantityId = $this->quantitiesTableGateway->getLastInsertValue();
                }

//                  echo "quantityId:".$quantityId."<br>";
                 $stepData = array(
                     'WorkflowId' => $id,
                     'StepId' => $i,
                     'IsMultiStep' => 0,// implement Multistep later. $step->isMultiStep,
                     'RecipeId' => $id,
                     'Text' => $step->text,
                     'QuantityId' => $quantityId,
                     'PictureId' => $step->pictureId,
                 );
                 $this->stepsTableGateway->insert($stepData);
                 
//                  echo "stepIngredient: ".$step->stepIngredient."<br>"; 
                 print_r($step);
                 // TODO: add possibility to add several ingredients to one singleStep
                 $singleStepIngredientData = array(
                     'WorkflowId' => $id,
                     'StepId' => $i,
                     'IngredientId' => $step->stepIngredient, 
                 );
                 $this->singleStepIngredientsTableGateway->insert($singleStepIngredientData);
                 
             }
             

         } 
         else{
             // TODO: implement update of recipe
            $message = "something wrong with recipe.id. is not 0";
            echo "<script type='text/javascript'>alert('$message');</script>";
         }
//          else {
//              if ($this->getAlbum($id)) {
//                  $this->tableGateway->update($data, array('id' => $id));
//              } else {
//                  throw new \Exception('Album id does not exist');
//              }
//          }
    }
    
    function getQuantityId($quantitiesData){
        $result = $this->quantitiesTableGateway->select($quantitiesData);
        if(count($result)>0){
            $current = $result->current();
            $id = $current->getArrayCopy()['id'];
            return $id;
        }
        // quantity does not exist
        return -1;
    }
}

?>